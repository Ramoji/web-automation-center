<div class="panel panel-primary">
  <div class="panel-heading top">Result<% if @path %> for path: <%= @path %><% end %><% if @line %> for line: <%= @line %><% end %><% if @other %> for <%= @other %><% end %><% if @task %> for task: <%= @task.name %><% end %></div>
  <div class="panel-body">
    <% if @method %>
      <h2>Method</h2>
      <div><%= @method %></div>
    <% end %>
    <h2>Url</h2>
    <div><%= @url %></div>
    <% if @body_sent %>
      <h2>Body sent</h2>
      <pre>
        <code>
          <%= @body_sent %>
        </code>
      </pre>
    <% end %>
    <h2>Headers</h2>
    <table class="table sortable long_text">
      <thead>
        <tr>
          <th data-defaultsort="asc">Key</th>
          <th>Value</th>
        </tr>
      </thead>

      <tbody>
        <% @headers_sent.each do |key, value| %>
          <tr>
            <td><%= key %></td>
            <td class="long_text"><%= value %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
    <h2>Response code</h2>
    <h3><span class="label label-default">
      <%
        response_code = ""
        if @response.respond_to? :status
          response_code = @response.status
        else
          response_code = @response.code
        end
      %>
      <%= response_code %>
    </span></h3>
    <h2>Response headers</h2>
    <table class="table sortable long_text">
      <thead>
        <tr>
          <th data-defaultsort="asc">Key</th>
          <th>Value</th>
        </tr>
      </thead>

      <tbody>
        <%
          if @response.respond_to? :headers
            headers = @response.headers
          else
            headers = @response
          end
          headers.each do |key, value|
        %>
          <tr>
            <td><%= key %></td>
            <td><%= value %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
    <h2>Response body</h2>
    <%
      output = ""
      body = @response.body
      begin
        if @response.respond_to? :headers
          content_type = @response.get_header('Content-Type')
        else
          content_type = @response["Content-Type"]
        end
        if content_type =~ /xml/
          xml = REXML::Document.new body
          links = Array.new
          REXML::XPath.each(xml, "//link") do |element|
            links << element.attributes["href"]
          end
          formatter = REXML::Formatters::Pretty.new(2)
          formatter.compact = true
          formatter.write(xml, output)
          parts = output.split(/<link href='[^']*'/)
        elsif body.encoding.name == 'ASCII-8BIT'
          output = "Response body can't be displayed because its probably binary data"
        else
          output = body
        end
      rescue
        output = body
      end
    %>
    <pre>
      <code>
        <% if parts %>
          <%
            i = 0
            parts.each do |part|
          %>
            <%= part -%><% if i < links.size %><%= "<link href='" -%><%= "<a onclick='follow_link(\"#{links[i]}\")'>#{links[i]}</a>".html_safe -%><%= "'" -%><% end %>
            <% i += 1 %>
          <% end %>
        <% else %>
          <%= output %>
        <% end %>
      </code>
    </pre>
  </div>
</div>

<% if @task %>
  <% if @regexpressions.size > 0 %>
  <div class="panel panel-default">
    <div class="panel-heading">Regular expressions</div>
    <div class="panel-body">
      <table class="table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Regular expression</th>
            <th>Description</th>
            <th>Result</th>
          </tr>
        </thead>

        <tbody>
          <% @regexpressions.each do |regexpression| %>
          <% uuid = SecureRandom.uuid %>
            <%= hidden_field_tag "replace_regexp_#{uuid}", regexpression.name, :class => "replace" %>
            <tr id="regexpression_<%= regexpression.id %>">
              <td><%= regexpression.name %></td>
              <td><%= regexpression.expression %></td>
              <td><%= regexpression.description %></td>
              <td>
                <% if regexpression.expression.starts_with?("HEADER:") %>
                  <%= @response.get_header(regexpression.expression.from(7)) %>
                  <%= hidden_field_tag "replace_regexp_#{uuid}_by", @response.get_header(regexpression.expression.from(7)), :class => "form-control by" %>
                <% else %>
                  <%
                    regexp = Regexp.new(regexpression.expression)
                    if regexp.match(@response.body)
                  %>
                    <%= @response.body.to_s.scan(regexp)[0][0] %>
                    <%= hidden_field_tag "replace_regexp_#{uuid}_by", @response.body.to_s.scan(regexp)[0][0], :class => "form-control by" %>
                  <% end %>
                <% end %>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
  <% end %>
<% end %>

<% if @platform %>
<script type="text/javascript">
  function follow_link(path) {
    var data = {
      path : path
    }
    $.ajax({
      type : "GET",
      url : "/platform/follow_link/<%= @platform.id.to_s -%>/",
      data : {data: JSON.stringify(data)}
    });
  }
  </script>
<% end %>

<% if @task %>
  <div id="execute_task_<%= @task.id %>_done"></div>
<% end %>
